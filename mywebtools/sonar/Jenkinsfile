pipeline {
    agent {label 'builder'}

    stages {
        stage('Pull') {
            steps {
                checkout([$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false,
                    extensions: [[$class: 'SubmoduleOption',
                        disableSubmodules: false,
                        parentCredentials: false,
                        recursiveSubmodules: true,
                        reference: '',
                        trackingSubmodules: false]], 
                    submoduleCfg: [], 
                    userRemoteConfigs: [[url: 'git@gitlab.com:ArekPatynowski/mywebtools.git']]])
            }
        }

        stage('SonarQube Analysis') {
            environment {
                sonarQubeToken = credentials('jenkins-sonar')
            }

            steps {
                withSonarQubeEnv('sq') {
                    script {
                        def scannerHome = tool 'SonarScanner for MSBuild'     
                        sh "dotnet ${scannerHome}/SonarScanner.MSBuild.dll begin /k:\"arkowe\" /d:sonar.host.url=\"https://sonar.januszex.trade\" /d:sonar.token=${sonarQubeToken}"
                        sh "dotnet build"
                        sh "dotnet ${scannerHome}/SonarScanner.MSBuild.dll end /d:sonar.token=${sonarQubeToken}"
                        
                    }
                }
            }
        }        
    }
    
    post {
      always {
        cleanWs()
      }
    }
}
